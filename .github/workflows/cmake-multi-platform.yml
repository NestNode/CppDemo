# 这个starter工作流是为运行在多个平台上的CMake项目准备的。如果你只想要一个单一的平台，有一个不同的初学者工作流程。See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # 将快速故障设置为false，以确保对所有矩阵组合提供反馈。当您的工作流程稳定时，请考虑将其更改为true。
      fail-fast: false

      # 建立一个矩阵，运行以下3种配置：
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            toolchain: msbuild
          - os: windows-latest
            c_compiler: gcc
            cpp_compiler: g++
            toolchain: mingw
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Depend
      run: |
        mkdir -p libs && cd libs
        
        curl -L -o httplib.h https://raw.githubusercontent.com/yhirose/cpp-httplib/master/httplib.h
        echo "------------------- finish depend - httplib"
        
        git clone --depth 1 https://github.com/gabime/spdlog.git
        # cd spdlog && mkdir build && cd build && cmake .. && cmake --build . && cd ../
        echo "------------------- finish depend - spdlog"
        
        git clone --depth 1 https://github.com/nlohmann/json.git
        # cd json && mkdir build && cd build && cmake .. && cmake --build . && cd ../
        echo "------------------- finish depend - json"
        
        tree -L 1

    - name: Set reusable strings
      # 将重复的输入字符串（例如构建输出目录）转换为步骤输出。这些步骤输出可以在整个工作流文件中使用。
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # 在 `build` `子目录下配置CMake。`CMAKE_BUILD_TYPE` 仅在使用单一配置生成器（如make）时才需要。
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # 使用给定的配置构建程序。注意 `——config` 是必需的，因为默认的Windows生成器是一个多配置生成器（Visual Studio生成器）。
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # 执行CMake配置定义的测试。注意 `——build-config` 是必需的，因为默认的Windows生成器是一个多配置生成器（Visual Studio生成器）。
      # 参见 https://cmake.org/cmake/help/latest/manual/ctest.1.html 了解更多细节
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
        path: ${{ steps.strings.outputs.build-output-dir }}
